---
title: "Managing your dotfiles"
subtitle: "RCS Seminar"
date: "2024-10-08"
format:
  revealjs:
    embed-resources: true
    theme: dark

authors:
 - name: Miren Radia
 - name: Jack Atkinson
---
## What are dotfiles? {.smaller}

* Dotfiles are personal configuration files that lie in your home directory.
* They are named as such because they typically either
  * Have filenames beginning with a "`.`".
  * Live in a subdirectory of your home directory that begins with a "`.`".
* Of course this means they are hidden on Unix-like systems.

### Examples {.smaller}

Some common examples you might have come across:

:::: {.columns}

::: {.column width="30%"}
* `~/.bashrc`
* `~/.ssh/config`[^*]
:::

::: {.column width="70%"}
* `~/.vimrc` or `~/.emacs`
* `~/.gitconfig` or `~/.config/git/config`
:::

::::

[^*]: It's wise to not make this file public _and_ unencrypted.

## Why manage your dotfiles? {.smaller}

* Over time you might customize these configuration files to best suit your
workflow, aesthetics and preferences.
* Managing your dotfiles using version control and remote repository hosting
has many of the same benefits as doing so for other code:
  * Backups.
  * Makes it simpler to determine and revert breaking changes.
  * History can add context to why a file is the way it is.
* The main additional benefit is making it [**much
  easier**]{style="color:orange;"} to move your configuration to a new machine.

## Frameworks/Tools {.smaller}

There are many frameworks/tools to help you manage your dotfiles:

:::: {.columns}

::: {.column width="50%"}
* [[**Bare git repository**]{style="color:orange;"}](https://www.atlassian.com/git/tutorials/dotfiles)
* [rcm](https://github.com/thoughtbot/rcm)
* [dotbot](https://github.com/anishathalye/dotbot)
* ...
:::

::: {.column width="50%"}
* [[**chezmoi**]{style="color:orange;"}](https://www.chezmoi.io/)
* [vcsh](https://github.com/RichiH/vcsh)
* [yadm](https://yadm.io/)
:::

::::

We will discuss the [first two]{style="color:orange;"}.

See
[https://dotfiles.github.io/utilities/](https://dotfiles.github.io/utilities/)
for a more comprehensive list.

## Bare git repository (Jack) {.smaller}

When I:

* had more time than I do now, and
* wanted to learn more about git

I followed a thread from hackernews about managing dotfiles.\
This is based on that with some modifications of my own.

Simple concept:

* put dotfiles in a git repo and clone to a new machine.
* Set up different branches for different machines.
  * Changes you want everywhere in `main` synced to rest.

## Bare git repository (Jack) {.smaller}

The devil of details:

* The repo is in `.dotfiles/` in `$HOME`, not `.git/`.
  * Places files where you want them avoiding potential confusion.
* The git command is aliased to `dotfiles` so you can use '`dotfiles`' instead of '`git`'.
  * This distinguishes is as a unique setup.
* Only explicitly tracked files are listed.
  * This avoids pollution with `$HOME` being very busy.

* Unautomated parts:
  * gpg protected files need to be decrypted manually.
    * Could probably build a script if you want to.


## Bare git repository (Jack) {.smaller}

Because I am a good RSE you can view things at
[github/jatkinson1000/dotfiles](https://github.com/jatkinson1000/dotfiles)
with information on how to setup and move to other machines, and references.

Have a peruse through my dotfiles - this is how I learnt many things that appear
in mine. I have tried to be very verbose in my comments for this reason.

Summary: If you want to learn some stuff about git, gpg, scripting and
derive satisfaction from hacking things together, like seeing how things work,
and are happy with 'good enough' give it a go.

If you want something that will work out the box with lots of features...




## chezmoi (Miren) ![Chezmoi logo](https://www.chezmoi.io/logo.svg) {.smaller}

* [chezmoi](https://www.chezmoi.io/) is a popular[^s] open-source tool that
makes it straightforward to manage your dotfiles.
* It offers several features[^c] beyond using a bare git repo:
  * Single branch with templating to manage differences between
  machines
  * Integration with password managers/full file encryption for secrets
  * Ability to run scripts (once or every time you apply)
* Installation is easy:
  * Runs on all popular OSs and architectures
  * Single static binary with no external
  dependencies; no root access required
* Great [documentation](https://www.chezmoi.io/user-guide/command-overview/).
* Powerful but straightforward to get started with.

[^s]: 13024 stars on GitHub on 02/10/2024
[^c]: See [here](https://www.chezmoi.io/comparison-table/) for a comparison with
other tools.

# Demo time
